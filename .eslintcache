[{"/home/johannes/Desktop/2048-game/src/App.js":"1","/home/johannes/Desktop/2048-game/src/index.js":"2","/home/johannes/Desktop/2048-game/src/reportWebVitals.js":"3","/home/johannes/Desktop/2048-game/src/util.js":"4"},{"size":12044,"mtime":1609782002250,"results":"5","hashOfConfig":"6"},{"size":500,"mtime":1609737693107,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1609737693139,"results":"8","hashOfConfig":"6"},{"size":944,"mtime":1609737693159,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"ysx4bi",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/johannes/Desktop/2048-game/src/App.js",["19","20"],"import React, { useState, useEffect } from \"react\";\nimport cloneDeep from \"lodash.clonedeep\";\nimport { useEvent, getColors } from \"./util\";\nimport Swipe from \"react-easy-swipe\";\n\nfunction App() {\n  // Defines key pree event\n  const UP_ARROW = 38;\n  const DOWN_ARROW = 40;\n  const LEFT_ARROW = 37;\n  const RIGHT_ARROW = 39;\n\n  // Set game state\n  const [data, setData] = useState([\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ]);\n\n  // Set game over state\n  const [gameOver, setGameOver] = useState(false);\n\n  // Set score state\n  const [score, setScore] = useState(0);\n\n  // Initialize:\n  // Add two random numbers to grid\n  const initialize = () => {\n    let emptyGrid = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    setGameOver(false)\n    setScore(0)\n    addNumber(emptyGrid);\n    addNumber(emptyGrid);\n    setData(emptyGrid);\n  };\n\n\n\n  // isGridFull:\n  // Checks if the grid is full, i. e., has no empty cell available\n  // If there is at least one cell with value 0 (zero), the grid is NOT full\n  const isGridFull = (grid) => {\n    console.log('check:')\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        console.log(grid[row][col])\n        if (grid[row][col] === 0) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n\n\n  // AddNumber: \n  // Inserts a number (2 or 4) in a random and empty position on grid\n  const addNumber = (newGrid) => {\n    let added = false;\n    let gridFull = false;\n    let attempts = 0;\n\n    while (!added) {\n      if (gridFull) {\n        break;\n      }\n\n      let row = Math.floor(Math.random() * 4);\n      let col = Math.floor(Math.random() * 4);\n      attempts++;\n      if (newGrid[row][col] === 0) {\n        let numberToAdd = Math.random() > 0.5 ? 2 : 4;\n        newGrid[row][col] = numberToAdd;\n        added = true;\n        handleScore(newGrid);\n      }\n      if (attempts > 50) {\n        gridFull = true;\n        let gameOver = checkIfGameIsOver();\n        if (gameOver) {\n          alert(\"Game over\");\n        }\n      }\n    }\n  };\n\n\n\n  const handleScore = (grid) => {\n    let newScore = 0\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        newScore = newScore + grid[row][col];\n        \n      }\n      setScore(newScore);\n    }\n  };\n\n\n\n  // Swipe Left\n  const swipeLeft = (mock) => {\n    let oldGrid = data;\n    let newGrid = cloneDeep(data);\n\n    for (let i = 0; i < 4; i++) {\n      let row = newGrid[i];\n      let pos1 = 0;\n      let pos2 = 1;\n\n      while (pos1 < 4) {\n        if (pos2 === 4) {\n          pos1++;\n          pos2 = pos1 + 1;\n          continue;\n        }\n\n\n        if (row[pos2] === 0) {\n          pos2++;\n        } else if (row[pos1] === 0) {\n          row[pos1] = row[pos2];\n          row[pos2] = 0;\n          pos2++;\n        } else if (row[pos1] !== 0) {\n          if (row[pos1] === row[pos2]) {\n            row[pos1] = row[pos1] + row[pos2];\n            row[pos2] = 0;\n            pos1++;\n            pos2 = pos1 + 1;\n          } else {\n            pos1++;\n            pos2 = pos1 + 1;\n          }\n        }\n      }\n    }\n    if (JSON.stringify(oldGrid) !== JSON.stringify(newGrid)) {\n      addNumber(newGrid);\n    }\n    if (mock) {\n      return newGrid;\n    } else {\n      setData(newGrid);\n    }\n  };\n\n\n\n  // Swipe right\n  const swipeRight = (mock) => {\n    let oldGrid = data;\n    let newGrid = cloneDeep(data);\n\n    for (let i = 3; i >= 0; i--) {\n      let row = newGrid[i];\n      let pos1 = row.length - 1;\n      let pos2 = pos1 - 1;\n\n      while (pos1 > 0) {\n        if (pos2 === -1) {\n          pos1--;\n          pos2 = pos1 - 1;\n          continue;\n        }\n\n        if (row[pos2] === 0) {\n          pos2--;\n        } else if (row[pos1] === 0) {\n          row[pos1] = row[pos2];\n          row[pos2] = 0;\n          pos2--;\n        } else if (row[pos1] !== 0) {\n          if (row[pos1] === row[pos2]) {\n            row[pos1] = row[pos1] + row[pos2];\n            row[pos2] = 0;\n            pos1--;\n            pos2 = pos1 - 1;\n          } else {\n            pos1--;\n            pos2 = pos1 - 1;\n          }\n        }\n      }\n    }\n    if (JSON.stringify(newGrid) !== JSON.stringify(oldGrid)) {\n      addNumber(newGrid);\n    }\n\n    if (mock) {\n      return newGrid;\n    } else {\n      setData(newGrid);\n    }\n  };\n\n\n\n  // Swipe down\n  const swipeDown = (mock) => {\n    let oldGrid = data// JSON.parse(JSON.stringify(data));\n    let newGrid = cloneDeep(data);\n\n    for (let i = 0; i < 4; i++) {\n      let pos1 = newGrid.length - 1;\n      let pos2 = pos1 - 1;\n\n      while (pos1 > 0) {\n        if (pos2 === -1) {\n          pos1--;\n          pos2 = pos1 - 1;\n          continue;\n        }\n\n        if (newGrid[pos2][i] === 0) {\n          pos2--;\n        } else if (newGrid[pos1][i] === 0) {\n          newGrid[pos1][i] = newGrid[pos2][i];\n          newGrid[pos2][i] = 0;\n          pos2--;\n        } else if (newGrid[pos1][i] !== 0) {\n          if (newGrid[pos1][i] === newGrid[pos2][i]) {\n            newGrid[pos1][i] = newGrid[pos1][i] + newGrid[pos2][i];\n            newGrid[pos2][i] = 0;\n            pos1--;\n            pos2 = pos1 - 1;\n          } else {\n            pos1--;\n            pos2 = pos1 - 1;\n          }\n        }\n      }\n    }\n    if (JSON.stringify(newGrid) !== JSON.stringify(oldGrid)) {\n      addNumber(newGrid);\n    }\n\n    if (mock) {\n      return newGrid;\n    } else {\n      setData(newGrid);\n    }\n  };\n\n\n\n  // Swipe up\n  const swipeUp = (mock) => {\n\n    let oldGrid = data;//JSON.parse(JSON.stringify(data));\n    let newGrid = cloneDeep(data);\n\n    for (let i = 0; i < 4; i++) {\n      let pos1 = 0;\n      let pos2 = 1;\n\n      while (pos1 < 4) {\n        if (pos2 === 4) {\n          pos1++;\n          pos2 = pos1 + 1;\n          continue;\n        }\n\n        if (newGrid[pos2][i] === 0) {\n          pos2++;\n        } else if (newGrid[pos1][i] === 0) {\n          newGrid[pos1][i] = newGrid[pos2][i];\n          newGrid[pos2][i] = 0;\n          pos2++;\n        } else if (newGrid[pos1][i] !== 0) {\n          if (newGrid[pos1][i] === newGrid[pos2][i]) {\n            newGrid[pos1][i] = newGrid[pos1][i] + newGrid[pos2][i];\n            newGrid[pos2][i] = 0;\n            pos1++;\n            pos2 = pos1 + 1;\n          } else {\n            pos1++;\n            pos2 = pos1 + 1;\n          }\n        }\n      }\n    }\n    if (JSON.stringify(oldGrid) !== JSON.stringify(newGrid)) {\n      addNumber(newGrid);\n    }\n\n    if (mock) {\n      return newGrid;\n    } else {\n      setData(newGrid);\n    }\n  };\n\n\n\n  // Check if game over, i. e. there is no possible move\n  // It mocks a move and checks if the data result is different from previous state\n  const checkIfGameIsOver = () => {\n    let checkLeft = swipeLeft(true);\n    if (JSON.stringify(data) !== JSON.stringify(checkLeft)) {\n      return false;\n    }\n\n    let checkerDown = swipeDown(true);\n    if (JSON.stringify(data) !== JSON.stringify(checkerDown)) {\n      return false;\n    }\n\n    let checkerRight = swipeRight(true);\n    if (JSON.stringify(data) !== JSON.stringify(checkerRight)) {\n      return false;\n    }\n\n    let checkerUp = swipeUp(true);\n    if (JSON.stringify(data) !== JSON.stringify(checkerUp)) {\n      return false;\n    }\n\n    return true;\n  };\n\n\n\n  // Handles events (arrow key is pressed)\n  const handleKeyDown = (event) => {\n    if (gameOver) {\n      return;\n    }\n    switch (event.keyCode) {\n      case UP_ARROW:\n        swipeUp();\n        break;\n      case DOWN_ARROW:\n        swipeDown();\n        break;\n      case LEFT_ARROW:\n        swipeLeft();\n        break;\n      case RIGHT_ARROW:\n        swipeRight();\n        break;\n      default:  // If any other key is pressed, ignore\n        break;\n    }\n\n    if (checkIfGameIsOver()) {\n      setGameOver(true);\n    }\n  };\n\n  useEffect(() => {\n    initialize();\n  }, []);\n\n  // This is a custom function\n  useEvent(\"keydown\", handleKeyDown);\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          width: 345,\n          margin: \"auto\",\n          marginTop: 30,\n        }}\n      >\n        <div style={{ display: \"flex\" }}>\n          <div\n            style={{\n              fontFamily: \"sans-serif\",\n              flex: 1,\n              fontWeight: \"700\",\n              fontSize: 60,\n              color: \"#776e65\",\n            }}\n          >\n            2048\n          </div>\n          <div\n            style={{\n              flex: 1,\n              marginTop: \"auto\",\n            }}\n          >\n            <div onClick={\n              initialize} style={style.newGameButton}>\n              New game\n            </div>\n            <div onClick={\n              initialize} style={style.newGameButton}>\n              {score}\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            background: \"#AD9D8F\",\n            width: \"max-content\",\n            height: \"max-content\",\n            margin: \"auto\",\n            padding: 5,\n            borderRadius: 5,\n            marginTop: 10,\n            position: \"relative\",\n          }}\n        >\n          {gameOver && (\n            <div style={style.gameOverOverlay}>\n              <div>\n                <div\n                  style={{\n                    fontSize: 30,\n                    fontFamily: \"sans-serif\",\n                    fontWeight: \"900\",\n                    color: \"#776E65\",\n                  }}\n                >\n                  Game over\n                </div>\n                <div>\n                  <div\n                    style={{\n                      flex: 1,\n                      marginTop: \"auto\",\n                    }}\n                  >\n                    <div onClick={\n                      initialize} style={style.tryAgainButton}>\n                      Try again\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          <Swipe\n            onSwipeDown={() => swipeDown()}\n            onSwipeLeft={() => swipeLeft()}\n            onSwipeRight={() => swipeRight()}\n            onSwipeUp={() => swipeUp()}\n\n            style={{ overflowY: \"hidden\" }}\n          >\n            {data.map((row, rowIndex) => {\n              return (\n                <div style={{ display: \"flex\" }} key={rowIndex}>\n                  {row.map((digit, colIndex) => (\n                    <Block num={digit} key={colIndex} />\n                  ))}\n                </div>\n              );\n            })}\n          </Swipe>\n        </div>\n\n        <div style={{ width: \"inherit\" }}>\n          <p class=\"game-explanation\">\n            <strong class=\"important\">How to play:</strong> {\" \"}\n            Use your arrow keys to move the tiles.\n            When two tiles with the same number touch, they merge into one!\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Block = ({ num }) => {\n  const { blockStyle } = style;\n\n  return (\n    <div\n      style={{\n        ...blockStyle,\n        background: getColors(num),\n        color: num === 2 || num === 4 ? \"#645B52\" : \"#F7F4EF\",\n      }}\n    >\n      {num !== 0 ? num : \"\"}\n    </div>\n  );\n};\n\nconst style = {\n  blockStyle: {\n    height: 80,\n    width: 80,\n    margin: 3,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 45,\n    fontWeight: \"800\",\n    color: \"white\",\n  },\n  newGameButton: {\n    padding: 10,\n    background: \"#846F5B\",\n    color: \"#F8F5F0\",\n    width: 95,\n    borderRadius: 7,\n    fontWeight: \"900\",\n    marginLeft: \"auto\",\n    marginBottom: \"auto\",\n    cursor: \"pointer\",\n  },\n  tryAgainButton: {\n    padding: 10,\n    background: \"#846F5B\",\n    color: \"#F8F5F0\",\n    width: 80,\n    borderRadius: 7,\n    fontWeight: \"900\",\n    cursor: \"pointer\",\n    margin: \"auto\",\n    marginTop: 20,\n  },\n  gameOverOverlay: {\n    position: \"absolute\",\n    height: \"100%\",\n    width: \"100%\",\n    left: 0,\n    top: 0,\n    borderRadius: 5,\n    background: \"rgba(238,228,218,.5)\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n};\n\nexport default App;\n","/home/johannes/Desktop/2048-game/src/index.js",[],"/home/johannes/Desktop/2048-game/src/reportWebVitals.js",[],"/home/johannes/Desktop/2048-game/src/util.js",[],{"ruleId":"21","severity":1,"message":"22","line":48,"column":9,"nodeType":"23","messageId":"24","endLine":48,"endColumn":19},{"ruleId":"25","severity":1,"message":"26","line":361,"column":6,"nodeType":"27","endLine":361,"endColumn":8,"suggestions":"28"},"no-unused-vars","'isGridFull' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialize'. Either include it or remove the dependency array.","ArrayExpression",["29"],{"desc":"30","fix":"31"},"Update the dependencies array to be: [initialize]",{"range":"32","text":"33"},[7829,7831],"[initialize]"]